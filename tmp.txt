/*
Contains code snippets, graphs, etc 
Helper code / functions 
*/

let ImpossibleStates = [ [ 1, 1 ], [ 1, 2 ], [ 2, 1 ], [ 2, 2 ], [ 3, 1 ], [ 3, 2 ] ]

let tmpObj = {
  '0': { state: [ 0, 0 ], edges: [ 1, 2 ] },
  '1': { state: [ 4, 0 ], edges: [ 0, 3, 5 ] },
  '2': { state: [ 0, 3 ], edges: [ 0, 3, 4 ] },
  '3': { state: [ 4, 3 ], edges: [ 2, 1 ] },
  '4': { state: [ 3, 0 ], edges: [ 0, 1, 13, 2 ] },
  '5': { state: [ 1, 3 ], edges: [ 2, 6, 3, 1 ] },
  '6': { state: [ 1, 0 ], edges: [ 0, 1, 5, 7 ] },
  '7': { state: [ 0, 1 ], edges: [ 0, 8, 2, 6 ] },
  '8': { state: [ 4, 1 ], edges: [ 7, 1, 3, 9 ] },
  '9': { state: [ 2, 3 ], edges: [ 2, 10, 3, 8 ] },
  '10': { state: [ 2, 0 ], edges: [ 0, 1, 9, 11 ] },
  '11': { state: [ 0, 2 ], edges: [ 0, 12, 2, 10 ] },
  '12': { state: [ 4, 2 ], edges: [ 11, 1, 3, 13 ] },
  '13': { state: [ 3, 3 ], edges: [ 2, 4, 3, 12 ] }
}


/*
Test Graph:

Test graph

    0
   1  2
   3
   4
*/

let g =  new Graph();
g.addNode(0, [0,0]);
g.addNode(1, [0,3]);
g.addNode(2, [4,0]);
g.addNode(3, [0,4]);
g.addNode(4, [2,2]);

g.addEdge(0,1);
g.addEdge(0,2);
g.addEdge(3,1);
g.addEdge(3,4);


// console.log("RESULT: ", result);

// result = shortestDistance(g,0,2,5);
// console.log("RESULT: ", result);
let result = g.isStatePresent([2,3]);
console.log("RESULT:", result);
g.displayGraph();

